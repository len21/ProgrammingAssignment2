setwd("~/ProgrammingAssignment2")
gitwd()
getwd()
}
makeVector <- function(x = numeric()) {
}
}
m <<- NULL
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
}
makeVector <- function(x = numeric()) {
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x <- 1:10
x
makeVextor(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
m <- NULL
m
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(x)
?makeVector
??makeVector
x
function() x
get <- function() x
get
makeVector <- function(x = numeric()) {
## stores a numeric vector and cache's its mean.
## here we create 4 methods: set, get, setmean & getmean
m <- NULL
## Create a new method called "set" that set the value of the vector
set <- function(y) {
x <<- y
m <<- NULL
}
## Create a new method called "get" that get the value of the vector
get <- function() x
## Create a new method called "setmean" that does
setmean <- function(mean) m <<- mean
## Create a new method called "getmean" that does
getmean <- function() m
## return a list with the four methods
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x
xx <- makeVector(x)
xx
xx$get()
xx$setmean
xx$setmean(x)
xx
xx$setmean(mean(x))
x <- 1:10
makeVector(x)
cachemean <- function(x, ...) {
## calculates the mean of the special "vector" created with the in the function makeVector()
## set m = to the mean of x
m <- x$getmean()
## if m is not null return the cached value of m
if(!is.null(m)) {
message("getting cached data")
return(m)
}
## since m is null aka not cached set data = to the value of x
data <- x$get()
## set m = the mean of data
m <- mean(data, ...)
## set the value
x$setmean(m)
## return the value of m
m
}
cachemean <- function(x, ...) {
## calculates the mean of the special "vector" created with the in the function makeVector()
## set m = to the mean of x
m <- x$getmean()
## if m is not null return the cached value of m
if(!is.null(m)) {
message("getting cached data")
return(m)
}
## since m is null aka not cached set data = to the value of x
data <- x$get()
## set m = the mean of data
m <- mean(data, ...)
## set the value
x$setmean(m)
## return the value of m
m
}
cachemean
cachemean(x)
x$getmean()
a
a <- makeVector()
class(a)
a
class(xx)
class(xx$set)
xx$set(c(1, 2, 3, 4, 5, 6, 7))
xx$get()
cachemean(xx)
class(m)
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
## set x = empty matric
## set inverse variable to null
mtxInverse <- NULL
## Create a new method called "set" that set the value of the matrix
set<-function(y){
x <<- y
# set function assigns the argument to x
mtxInverse <<- NULL
# reset Inverse cto NULL
}
## Create a new method called "get" that get the value of the matrix
get <- function() x
## Create a new method called "setmatrix" that  get the inverse of
setmatrixInverse<-function(solve)  mtxInverse <<- solve
## Create a new method called "getmatrix" which returns the inverse matrix
getmatrixInverse <- function() mtxInverse
## return a list with the four methods/functions
list(set = set, get = get, setmatrixInverse = setmatrixInverse, getmatrixInverse = getmatrixInverse)
}
Mtx <- makeCacheMatrix()
class(Mtx)
Mtx$set(matrix(1:4, 2, 2))
M$get()
Mtx$get()
Mtx$getInverse()
Mtx$getmatrixInverse()
Mtx$setmatrixInverse(9)
Mtx$getmatrixInverse()
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
## set x = empty matric
## set inverse variable to null
mtxInverse <- NULL
## Create a new method called "set" that set the value of the matrix
set<-function(y){
x <<- y
# set function assigns the argument to x
mtxInverse <<- NULL
# reset Inverse cto NULL
}
## Create a new method called "get" that get the value of the matrix
get <- function() x
## Create a new method called "setmatrix" that get the inverse of variable mtxInverse
setmatrixInverse<-function(solve)  mtxInverse <<- solve
## Create a new method called "getmatrix" which returns the inverse matrix
getmatrixInverse <- function() mtxInverse
## return a list with the four methods/functions
list(set = set, get = get, setmatrixInverse = setmatrixInverse, getmatrixInverse = getmatrixInverse)
}
# calculates the mean of the special "matrix" created with the in the function makeCacheMatrix()
cacheSolve <- function(x=matrix(), ...) {
# calculates the mean of the special "matric" created with the in the function makeCacheMatrix()
# get the value of the inverse
mtxInverse <- x$getmatrixInverse()
# If the value of Inverse is NOT null returns that value
if(!is.null(mtxInverse)){
message("getting cached data")
return(mtxInverse)
}
# since mtxInverse is null aka not cached set data = to the value of x and calculate the inverse
data <- x$get()
# set mtxInverse = Inverse of x
mtxInverse <- solve(data, ...)
# set the new Inverse value to cache
x$setmatrixInverse(mtxInverse)
# Returns the new Inverse value
mtxInverse
}
# calculates the mean of the special "matrix" created with the in the function makeCacheMatrix()
cacheSolve <- function(x=matrix(), ...) {
# get the value of the inverse
mtxInverse <- x$getmatrixInverse()
# If the value of Inverse is NOT null returns that value
if(!is.null(mtxInverse)){
message("getting cached data")
return(mtxInverse)
}
# since mtxInverse is null (aka not cached) set data = to the value of x and calculate the inverse
data <- x$get()
# set mtxInverse = Inverse of x
mtxInverse <- solve(data, ...)
# set the new Inverse value to cache
x$setmatrixInverse(mtxInverse)
# Returns the new Inverse value
mtxInverse
}
# This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
# set x = empty matric
# set inverse variable to null
mtxInverse <- NULL
# Create a new method called "set" that set the value of the matrix
set<-function(y){
x <<- y
# set function assigns the argument to x
mtxInverse <<- NULL
# reset Inverse cto NULL
}
# Create a new method called "get" that get the value of the matrix
get <- function() x
# Create a new method called "setmatrix" that get the inverse of variable mtxInverse
setmatrixInverse<-function(solve)  mtxInverse <<- solve
# Create a new method called "getmatrix" which returns the inverse matrix
getmatrixInverse <- function() mtxInverse
# return a list with the four methods/functions
list(set = set, get = get, setmatrixInverse = setmatrixInverse, getmatrixInverse = getmatrixInverse)
}
# This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
# set x = empty matric
# set inverse variable to null
mtxInverse <- NULL
# Create a new method called "set" that set the value of the matrix
set<-function(y){
x <<- y
# set function assigns the argument to x
mtxInverse <<- NULL
# reset Inverse cto NULL
}
# Create a new method called "get" that get the value of the matrix
get <- function() x
# Create a new method called "setmatrix" that get the inverse of variable mtxInverse
setmatrixInverse<-function(solve)  mtxInverse <<- solve
# Create a new method called "getmatrix" which returns the inverse matrix
getmatrixInverse <- function() mtxInverse
# return a list with the four methods/functions
list(set = set, get = get, setmatrixInverse = setmatrixInverse, getmatrixInverse = getmatrixInverse)
}
M <- makeCacheMatrix()
class(M)
M$set(matrix(1:4, 2, 2))
M
M$get()
M$getInverse()
M$getmatrixInverse()
M$setmatrixInverse(9)
cacheSolve(M)
M$setInverse(NULL)
M$setmatrixInverse(NULL)
cacheSolve(M)
M$set(matrix(1:9, 3, 3))
M$get()
M$getmatrixInverse()
cacheSolve(M)
